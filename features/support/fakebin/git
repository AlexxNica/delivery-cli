#!/bin/bash
# A wrapper for system git that prevents commands such as `push` to be
# executed in testing. It logs commands to "~/.history" so afterwards it can be
# asserted that they ran.
#
# Shamelessly stolen from https://github.com/github/hub
command="$1"
[ "$command" = "config" ] || echo git "$@" >> "$FAKE_BINS_HISTORY_FILE"

set -e
features_dir=$( cd "$( dirname "${BASH_SOURCE[0]}" )/../.." && pwd )
tmp_dir=$features_dir/tmp
mkdir -p $tmp_dir

upper_command=$(echo "$command" | tr '[:lower:]' '[:upper:]')
eval mocked_var_reference="${upper_command}_MOCKED"
if [[ $MOCK_ALL_BASH = true ]] || [[ ${!mocked_var_reference} = true ]]; then
    echo "Skipping mocked git call: $command"
else
    case "$command" in
	"clone" )
            repo_dir=$3
            mkdir -p $repo_dir
            cd $repo_dir
	    $DELIVERY_SYSTEM_GIT init
            mkdir .delivery
            echo '{
                    "version": "2",
                    "build_cookbook": {
                      "name": "build_cookbook",
                      "path": ".delivery/build_cookbook"
                    },
                      "build_nodes": {
                      "default"    : ["name:delivery-builder*"]
                    }
                  }' > .delivery/config.json
	    ;;
	# there are some commands we don't want to run
	"push" )
	    ;;
	"branch" )
	    # mock delete branch, since things can get wonky
	    # with unmerged paths because push is mocked.
	    if [ "$2" = "-d" ]
	    then
		echo "Mocking call to 'git branch -d'" >> /tmp/wtf
	    elif [ "$2" = "-D" ]
	    then
		echo "Mocking call to 'git branch -D'" >> /tmp/wtf
	    else
		$DELIVERY_SYSTEM_GIT "$@"
	    fi
	    ;;
	"fetch" )
	    ;;
	"ls-remote" )
	    ;;
	"show" )
	    [ "$3" = "master:metadata.rb" ] || echo "version '1.2.3'"
	    ;;
	* )
	    $DELIVERY_SYSTEM_GIT "$@"
	    ;;
    esac
fi
